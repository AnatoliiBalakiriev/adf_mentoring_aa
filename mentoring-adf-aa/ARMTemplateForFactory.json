{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mentoring-adf-aa"
		},
		"LinkedServiceForBlobStorageAustralia_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LinkedServiceForBlobStorageAustralia'"
		},
		"LinkedServiceForSQLDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LinkedServiceForSQLDatabase'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=azure-mentoring-aa.database.windows.net;Initial Catalog=movies;User ID=anatolii"
		},
		"LinkedServiceParametrized_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LinkedServiceParametrized'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=@{linkedService().ServerName};Initial Catalog=@{linkedService().DatabaseName};User ID=anatolii"
		},
		"LinkedServiceToOnlineBlobStorageContainerRawFolderDataLake_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LinkedServiceToOnlineBlobStorageContainerRawFolderDataLake'"
		},
		"LinkedServiceDataLakeParametrized_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().StorageURL}"
		},
		"LinkedServiceForAzureKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://mentoring-key-vault-aav2.vault.azure.net/"
		},
		"LinkedServiceForBlobStorage_properties_typeProperties_sasUri_secretName": {
			"type": "string",
			"defaultValue": "BlobSASURL"
		},
		"LinkedServiceForDataLakeStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://azurementoringdatalakeaa.dfs.core.windows.net/"
		},
		"LinkedServiceToOnlineBlobStorageContainer_properties_typeProperties_sasUri_secretName": {
			"type": "string",
			"defaultValue": "SASURIforOnlineContainer"
		},
		"LinkedServiceToSQLServerForCinemaTickets_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "ConnectionStringToSQLServerWindowsAuthentication"
		},
		"LinkedServiceToSQLServerForCinemaTickets_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "KYIV\\Anatolii_Balakiriev1"
		},
		"LinkedServicetoDataMartSQLDatabase_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "DataMartConnectionString"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/12-1 - New Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "test",
							"value": {
								"value": "@pipeline().DataFactory",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"test": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/7-1 - Incremental copy from blob to datalake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupOldWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "TriggerTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT\nTableName,\nWatermarkValue\nFROM\nwatermarktable\nWHERE\nTableName = 'JSON files';",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WatermarkDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "WriteWatermarkActivity",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data incrementally",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@variables('TriggerTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"TableName": {
									"value": {
										"value": "@{activity('LookupOldWaterMarkActivity').output.firstRow.TableName}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LinkedServiceForSQLDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy data incrementally",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupOldWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"maxConcurrentConnections": 0,
									"recursive": false,
									"modifiedDatetimeStart": {
										"value": "@{activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue}",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@variables('TriggerTime')",
										"type": "Expression"
									},
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SourceDatasetForOnlineBlobStorageContainer",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkDatasetForOnlineBlobStorageContainerRawFolderDataLake",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "TriggerTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TriggerTime",
							"value": {
								"value": "@pipeline().TriggerTime",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"TriggerTime": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-16T16:10:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WatermarkDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForSQLDatabase')]",
				"[concat(variables('factoryId'), '/datasets/SourceDatasetForOnlineBlobStorageContainer')]",
				"[concat(variables('factoryId'), '/datasets/SinkDatasetForOnlineBlobStorageContainerRawFolderDataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/7-2 - Load JSON to Azure SQL Database')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data to the database",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate a stage table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "sourceFilename",
										"value": "$$FILEPATH"
									},
									{
										"name": "pipelineID",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": "online",
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['serviceName']"
										},
										"sink": {
											"name": "online_service_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['serviceCode']"
										},
										"sink": {
											"name": "online_service_code",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['movieId']"
										},
										"sink": {
											"name": "movie_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['userId']"
										},
										"sink": {
											"name": "user_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['price']"
										},
										"sink": {
											"name": "price",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['id']"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['datetime']"
										},
										"sink": {
											"name": "transaction_date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['sourceFilename']"
										},
										"sink": {
											"name": "source_filename",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['pipelineID']"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String"
										}
									}
								],
								"collectionReference": ""
							}
						},
						"inputs": [
							{
								"referenceName": "SinkDatasetForOnlineBlobStorageContainerRawFolderDataLake",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkDatasetForAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate a stage table",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LinkedServiceForSQLDatabase",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE [stg].[online_purchase];"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Populate tOnlineService table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data to the database",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateOnlineService]"
						},
						"linkedServiceName": {
							"referenceName": "LinkedServiceForSQLDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Populate tOnlinePurchase table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Populate tOnlineService table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateOnlinePurchase]"
						},
						"linkedServiceName": {
							"referenceName": "LinkedServiceForSQLDatabase",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-20T16:34:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SinkDatasetForOnlineBlobStorageContainerRawFolderDataLake')]",
				"[concat(variables('factoryId'), '/datasets/SinkDatasetForAzureSQLDatabase')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/7-3 - Archive processed files v2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Archive Processed Files",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": "online",
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SinkDatasetForOnlineBlobStorageContainerRawFolderDataLake",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkArchievingProcessedFiles",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete From Data Lake Source",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Archive Processed Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SinkDatasetForOnlineBlobStorageContainerRawFolderDataLake",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "LinkedServiceForDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": "*.json",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-20T16:34:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SinkDatasetForOnlineBlobStorageContainerRawFolderDataLake')]",
				"[concat(variables('factoryId'), '/datasets/SinkArchievingProcessedFiles')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/7-4 - Master pipeline - Module 7')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load JSON to Azure SQL Database",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Incremental copy from blob to datalake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "7-2 - Load JSON to Azure SQL Database",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Archive processed files v2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load JSON to Azure SQL Database",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "7-3 - Archive processed files v2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Incremental copy from blob to datalake",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "7-1 - Incremental copy from blob to datalake",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-15T19:26:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/7-2 - Load JSON to Azure SQL Database')]",
				"[concat(variables('factoryId'), '/pipelines/7-3 - Archive processed files v2')]",
				"[concat(variables('factoryId'), '/pipelines/7-1 - Incremental copy from blob to datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/8-1 - Data Flow to populate Dimension tables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Population of dimension tables",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Population",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tMoviesTable": {},
									"tMoviesStatusTable": {},
									"tOnlineServiceTable": {},
									"DestinationDimMovieTable": {},
									"DestinationDimOnlineServiceTable": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-21T17:43:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Population')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-M8')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/8-2 - Data Flow to populate Fact tables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Populate Fact tables",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Fact Tables population",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tOnlinePurchaseTable": {},
									"DimOnlineServiceTable": {},
									"DimMovieTable": {},
									"tOnlineServiceTable": {},
									"tMoviesTable": {},
									"tOnlinePurchaseTable2": {},
									"DestinationFactOnlinePurchaseTable": {},
									"DestinationFactOnlinePurchaseMonthlySnapshotTable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-22T13:42:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Fact Tables population')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/8-3 - Master pipeline - Module 8')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Incremental copy from blob to datalake",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "7-1 - Incremental copy from blob to datalake",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load JSON to Azure SQL Database",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Incremental copy from blob to datalake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "7-2 - Load JSON to Azure SQL Database",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Archive processed files v2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load JSON to Azure SQL Database",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "7-3 - Archive processed files v2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Data Flow to populate Dimension tables",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Archive processed files v2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "8-1 - Data Flow to populate Dimension tables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Data Flow to populate Fact tables",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Data Flow to populate Dimension tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "8-2 - Data Flow to populate Fact tables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-22T21:39:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/7-1 - Incremental copy from blob to datalake')]",
				"[concat(variables('factoryId'), '/pipelines/7-2 - Load JSON to Azure SQL Database')]",
				"[concat(variables('factoryId'), '/pipelines/7-3 - Archive processed files v2')]",
				"[concat(variables('factoryId'), '/pipelines/8-1 - Data Flow to populate Dimension tables')]",
				"[concat(variables('factoryId'), '/pipelines/8-2 - Data Flow to populate Fact tables')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/9-1 - Implement Copy Activity with Parametrization')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookuptControlMetadataTable",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ConfigurationTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "LoopControlMetaDataTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookuptControlMetadataTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookuptControlMetadataTable').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CopyData",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "@{item().SourceContainer}/@{item().SourceFolder}/@{item().SourceFile}"
										},
										{
											"name": "Destination",
											"value": "@{item().SchemaName}.@{item().TableName}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "pipelineId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "source_filename",
													"value": "$$FILEPATH"
												}
											],
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"wildcardFolderPath": {
													"value": "@item().SourceFolder",
													"type": "Expression"
												},
												"wildcardFileName": {
													"value": "@item().SourceFile",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "TRUNCATE TABLE @{item().SchemaName}.@{item().TableName}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "LinkedServiceForDataLakeStorage",
													"type": "LinkedServiceReference"
												},
												"path": "logdata"
											}
										},
										"dataIntegrationUnits": {
											"value": "@item().DIU",
											"type": "Expression"
										},
										"translator": {
											"value": "@json(item().mapping)",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "DynamicDatasetDataLake",
											"type": "DatasetReference",
											"parameters": {
												"DS_SourceContainer": {
													"value": "@item().SourceContainer",
													"type": "Expression"
												},
												"DS_SourceFolder": {
													"value": "@item().SourceFolder",
													"type": "Expression"
												},
												"DS_SourceFile": {
													"value": "@item().SourceFile",
													"type": "Expression"
												},
												"DS_ColumnDelimiter": {
													"value": "@item().ColumnDelimiter",
													"type": "Expression"
												},
												"DS_Encoding": {
													"value": "@item().Encoding",
													"type": "Expression"
												},
												"DS_EscapeCharacter": {
													"value": "@item().EscapeCharacter",
													"type": "Expression"
												},
												"DS_QuoteCharacter": {
													"value": "@item().QuoteCharacter",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DynamicDatasetAzureSQL",
											"type": "DatasetReference",
											"parameters": {
												"DS_SchemaName": {
													"value": "@item().SchemaName",
													"type": "Expression"
												},
												"DS_TableName": {
													"value": "@item().TableName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "StatisticsLog",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyData",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[InsertStatisticsLog]",
										"storedProcedureParameters": {
											"CopiedRowsCount": {
												"value": {
													"value": "@activity('CopyData').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DIU": {
												"value": {
													"value": "@activity('CopyData').output.usedDataIntegrationUnits",
													"type": "Expression"
												},
												"type": "String"
											},
											"Errors": {
												"value": {
													"value": "@activity('CopyData').output.errors",
													"type": "Expression"
												},
												"type": "String"
											},
											"IntegrationRuntimeTitle": {
												"value": {
													"value": "@activity('CopyData').output.effectiveIntegrationRuntime",
													"type": "Expression"
												},
												"type": "String"
											},
											"ParallelCopies": {
												"value": {
													"value": "@activity('CopyData').output.usedParallelCopies",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"PipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"ProcessedFileName": {
												"value": {
													"value": "@item().SourceFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"ProcessedFilesCount": {
												"value": {
													"value": "@activity('CopyData').output.filesRead",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ReadDataBytes": {
												"value": {
													"value": "@activity('CopyData').output.dataRead",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ReadRowsCount": {
												"value": {
													"value": "@activity('CopyData').output.rowsRead",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"RunId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"SinkType": {
												"value": {
													"value": "@activity('CopyData').output.executionDetails[0].sink.type",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceType": {
												"value": {
													"value": "@activity('CopyData').output.executionDetails[0].source.type",
													"type": "Expression"
												},
												"type": "String"
											},
											"Throughput": {
												"value": {
													"value": "@activity('CopyData').output.throughput",
													"type": "Expression"
												},
												"type": "String"
											},
											"WriteDataBytes": {
												"value": {
													"value": "@activity('CopyData').output.dataWritten",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LinkedServiceForSQLDatabase",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "PipelineLog",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyData",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[InsertPipelineLog]",
										"storedProcedureParameters": {
											"CopyDurationSeconds": {
												"value": {
													"value": "@activity('CopyData').output.executionDetails[0].duration",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"EndTime": {
												"value": {
													"value": "@addSeconds(activity('CopyData').output.executionDetails[0].start, activity('CopyData').output.executionDetails[0].duration)",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"PipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"PreCopyScriptDurationSeconds": {
												"value": {
													"value": "@activity('CopyData').output.executionDetails[0].detailedDurations.preCopyScriptDuration",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"QueueDurationSeconds": {
												"value": {
													"value": "@activity('CopyData').output.executionDetails[0].detailedDurations.queuingDuration",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"RunId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"StartTime": {
												"value": {
													"value": "@activity('CopyData').output.executionDetails[0].start",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"Status": {
												"value": {
													"value": "@activity('CopyData').output.executionDetails[0].status",
													"type": "Expression"
												},
												"type": "String"
											},
											"TransferDurationSeconds": {
												"value": {
													"value": "@activity('CopyData').output.executionDetails[0].detailedDurations.transferDuration",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LinkedServiceForSQLDatabase",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "BillingLog",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyData",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[InsertBillingLog]",
										"storedProcedureParameters": {
											"Duration": {
												"value": {
													"value": "@activity('CopyData').output.billingReference.billableDuration[0].duration",
													"type": "Expression"
												},
												"type": "Decimal"
											},
											"MeterType": {
												"value": {
													"value": "@activity('CopyData').output.billingReference.billableDuration[0].meterType",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"Unit": {
												"value": {
													"value": "@activity('CopyData').output.billingReference.billableDuration[0].unit",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LinkedServiceForSQLDatabase",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "ErrorHandling",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyData",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[InsertPipelineErrorLog]",
										"storedProcedureParameters": {
											"ActivityName": {
												"value": {
													"value": "'CopyData'",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorCode": {
												"value": {
													"value": "@concat(activity('CopyData').output.errors[0].Code, ': ', split(split(activity('CopyData').output.errors[0].Message, '=')[1], ',')[0])",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorDatetime": {
												"value": {
													"value": "@utcNow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"ErrorMessage": {
												"value": {
													"value": "@activity('CopyData').output.errors[0].Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"FailureType": {
												"value": {
													"value": "@split(split(activity('CopyData').output.errors[0].Message, ',')[1],'=')[1]",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LinkedServiceForSQLDatabase",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Status",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ErrorHandling",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Status",
										"value": {
											"value": "@activity('CopyData').output.executionDetails[0].status",
											"type": "Expression"
										}
									}
								},
								{
									"name": "PipelineError",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "PipelineError",
										"value": {
											"value": "@{activity('CopyData').output.errors[0].Message}",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "POST Send Email Success",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GET Azure Key Vault Secret - Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@activity('GET Azure Key Vault Secret - Success').output.value",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "{\n  \"message\" : \"This is our dynamic message from our pipeline with @{pipeline().RunId} run ID. This is a part of the task from the 11th module.\",\n  \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n  \"pipelineName\": \"@{pipeline().Pipeline}\",\n  \"runId\": \"@{pipeline().RunId}\",\n  \"copyDataActivityName\": \"CopyData\",\n  \"receiver\": \"@{pipeline().parameters.receiver}\",\n  \"pipelineStatus\": \"@{variables('Status')}\",\n  \"ErrorMessage\": \"@{variables('PipelineError')}\"\n}\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "POST Send Email Failure",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GET Azure Key Vault Secret - Failure",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@activity('GET Azure Key Vault Secret - Failure').output.value",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "{\n  \"message\" : \"This is our dynamic message from our pipeline with @{pipeline().RunId} run ID. This is a part of the task from the 11th module.\",\n  \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n  \"pipelineName\": \"@{pipeline().Pipeline}\",\n  \"runId\": \"@{pipeline().RunId}\",\n  \"copyDataActivityName\": \"CopyData\",\n  \"receiver\": \"@{pipeline().parameters.receiver}\",\n  \"pipelineStatus\": \"@{variables('Status')}\",\n  \"ErrorMessage\": \"@{variables('PipelineError')}\"\n}\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GET Azure Key Vault Secret - Success",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "LoopControlMetaDataTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.URIofHTTPPOST_secret",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "GET Azure Key Vault Secret - Failure",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "LoopControlMetaDataTable",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.URIofHTTPPOST_secret",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"receiver": {
						"type": "string",
						"defaultValue": "Anatolii_Balakiriev1@epam.com"
					}
				},
				"variables": {
					"Status": {
						"type": "String",
						"defaultValue": "Succeeded"
					},
					"PipelineError": {
						"type": "String",
						"defaultValue": "No errors"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-02T20:19:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ConfigurationTable')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-M8')]",
				"[concat(variables('factoryId'), '/datasets/DynamicDatasetDataLake')]",
				"[concat(variables('factoryId'), '/datasets/DynamicDatasetAzureSQL')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForSQLDatabase')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Archive processed files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Archive Processed Files",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceOfCSVFiles",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkOfCSVFiles",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete From Source",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Archive Processed Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SourceOfCSVFiles",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "LinkedServiceForDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": "*.csv",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-24T19:55:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceOfCSVFiles')]",
				"[concat(variables('factoryId'), '/datasets/SinkOfCSVFiles')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Autoresolve Azure Integration runtime')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data from blob to datalake",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "ratings.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RatingsCSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RatingsCSVSink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-15T21:03:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RatingsCSV')]",
				"[concat(variables('factoryId'), '/datasets/RatingsCSVSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Clone_8-2 - Data Flow to populate Fact tables_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Populate Fact tables",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Clone_Fact Tables population",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tOnlinePurchaseTable": {},
									"DimOnlineServiceTable": {},
									"DimMovieTable": {},
									"tOnlineServiceTable": {},
									"tMoviesTable": {},
									"tOnlinePurchaseTable2": {},
									"DestinationFactOnlinePurchaseTable": {},
									"DestinationFactOnlinePurchaseMonthlySnapshotTable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-22T19:29:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Clone_Fact Tables population')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromBlobStorageToDataLake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get File List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get File List').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CopyFiles",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "LinkedServiceForDataLakeStorage",
													"type": "LinkedServiceReference"
												},
												"path": "log"
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SourceDataset",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "SinkDataset",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@concat(replace(item().name,'.csv',''),'_',formatDateTime(variables('datetime'),'yyyyMMddHHmmss'),'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Get File List",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "DateTime postfix",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SourceDataset",
								"type": "DatasetReference",
								"parameters": {
									"filename": "*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "DateTime postfix",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "datetime",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"datetime": {
						"type": "String",
						"defaultValue": "utcnow()"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-23T20:11:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset')]",
				"[concat(variables('factoryId'), '/datasets/SinkDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_New')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DateTime postfix",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "datetime",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyData",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DateTime postfix",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_New",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkDataset_New",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"datetime": {
						"type": "String",
						"defaultValue": "utcnow()"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-08T13:38:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_New')]",
				"[concat(variables('factoryId'), '/datasets/SinkDataset_New')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Execute Procedures Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "credits to tCast procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCast]"
						},
						"linkedServiceName": {
							"referenceName": "LinkedServiceForSQLDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "credits to tMoviesCastMap procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "credits to tCast procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesCastMap]"
						},
						"linkedServiceName": {
							"referenceName": "LinkedServiceForSQLDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "movies_metadata to tCompany procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "credits to tMoviesCastMap procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCompany]"
						},
						"linkedServiceName": {
							"referenceName": "LinkedServiceForSQLDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "movies_metadata to tMovieStatus procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "movies_metadata to tCompany procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMovieStatus]"
						},
						"linkedServiceName": {
							"referenceName": "LinkedServiceForSQLDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "movies_metadata to tGenre procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "movies_metadata to tMovieStatus procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateGenre]"
						},
						"linkedServiceName": {
							"referenceName": "LinkedServiceForSQLDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "movies_metadata to tMovies procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "movies_metadata to tGenre procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMovies]"
						},
						"linkedServiceName": {
							"referenceName": "LinkedServiceForSQLDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "movies_metadata to tMoviesCompanyMap procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "movies_metadata to tMovies procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesCompanyMap]"
						},
						"linkedServiceName": {
							"referenceName": "LinkedServiceForSQLDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "movies_metadata to tMoviesGenreMap procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "movies_metadata to tMoviesCompanyMap procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesGenreMap]"
						},
						"linkedServiceName": {
							"referenceName": "LinkedServiceForSQLDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ratings to tRatings procedure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "movies_metadata to tMoviesGenreMap procedure",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulatetRatings]"
						},
						"linkedServiceName": {
							"referenceName": "LinkedServiceForSQLDatabase",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-24T19:27:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FailActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Fail",
						"type": "Fail",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"message": "ErrorCode=UserErrorFileNotFound,'Type=Microsoft.DataTransfer.Common.Shared.HybridDeliveryException,Message=ADLS Gen2 operation failed for: Operation returned an invalid status code 'NotFound'. Account: 'azurementoringdatalakeaa'. FileSystem: 'raw'. Path: 'metadata-driven/unknown_file.csv'. ErrorCode: 'PathNotFound'. Message: 'The specified path does not exist.'. RequestId: 'd8bf6c5f-a01f-001b-4770-62b025000000'. TimeStamp: 'Wed, 29 Mar 2023 18:56:30 GMT'.,Source=Microsoft.DataTransfer.ClientLibrary,''Type=Microsoft.Azure.Storage.Data.Models.ErrorSchemaException,Message=Operation returned an invalid status code 'NotFound',Source=Microsoft.DataTransfer.ClientLibrary,'",
							"errorCode": "9012: UserErrorFileNotFound"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-30T18:36:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Incremental copy from on-premises MS SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupOldWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WatermarkDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupNewWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT\nMAX([TransactionDt]) AS NewWatermarkvalue\nFROM\n[dbo].[Tickets]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SourceSQLServerCinemaTickets",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy data incrementally",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate a stage table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT\n    *\nFROM\n    [dbo].[Tickets]\nWHERE\n    [TransactionDt] > '@{activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue}'\n    AND\n    [TransactionDt] <= '@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CinemaCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CinemaName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MovieId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "movie_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketCount",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ticket_count",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketPrice",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										},
										"sink": {
											"name": "ticket_price",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										}
									},
									{
										"source": {
											"name": "TransactionId",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TransactionDt",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "transaction_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceSQLServerCinemaTickets",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkStageCinemaTicketsTableInMoviesDatabase",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate a stage table",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "LookupOldWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupNewWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LinkedServiceForSQLDatabase",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE [stg].[cinema_tickets];"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "WriteWatermarkActivity",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Populate tCinemaTickets table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"TableName": {
									"value": {
										"value": "@{activity('LookupOldWaterMarkActivity').output.firstRow.TableName}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LinkedServiceForSQLDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Populate tCinema table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data incrementally",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulatetCinema]"
						},
						"linkedServiceName": {
							"referenceName": "LinkedServiceForSQLDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Populate tCinemaTickets table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Populate tCinema table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulatetCinemaTickets]"
						},
						"linkedServiceName": {
							"referenceName": "LinkedServiceForSQLDatabase",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-20T16:12:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WatermarkDataset')]",
				"[concat(variables('factoryId'), '/datasets/SourceSQLServerCinemaTickets')]",
				"[concat(variables('factoryId'), '/datasets/SinkStageCinemaTicketsTableInMoviesDatabase')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "From DataLake To Database Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "From Blob To DataLake Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "copyFromDataLaketoSTGschema",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Stored Procedures Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "From DataLake To Database Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Execute Procedures Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "From Blob To DataLake Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyFromBlobStorageToDataLake",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Archive Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Stored Procedures Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Archive processed files",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-25T17:44:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/copyFromDataLaketoSTGschema')]",
				"[concat(variables('factoryId'), '/pipelines/Execute Procedures Pipeline')]",
				"[concat(variables('factoryId'), '/pipelines/CopyFromBlobStorageToDataLake')]",
				"[concat(variables('factoryId'), '/pipelines/Archive processed files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/___PL_ACT_MT_Copy_Parameters')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_files_add_timestamp",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "LinkedServiceForDataLakeStorage",
										"type": "LinkedServiceReference"
									},
									"path": "log"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ABLB_files",
								"type": "DatasetReference",
								"parameters": {
									"SourceFileName": "@pipeline().parameters.SourceFileName"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_Files",
								"type": "DatasetReference",
								"parameters": {
									"SinkFileName": {
										"value": "@concat(replace(pipeline().parameters.SourceFileName, '.csv', ''), '_', formatDateTime(utcNow(), 'yyyyMMddHHmmss'), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "@dataset().SourceFileName"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-08T13:25:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ABLB_files')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_Files')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyFromDataLaketoSTGschema')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Credits File",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "credits_*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.credits;",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "cast",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cast",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "crew",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "crew",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipelineId",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "source_filename",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Credits_File",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Credits_Sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy MetaData File",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "movies_metadata_*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.movies_metadata;",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "adult",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "adult",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "belongs_to_collection",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "belongs_to_collection",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "budget",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "budget",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "genres",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "genres",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "homepage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "homepage",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "imdb_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "imdb_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "original_language",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "original_language",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "original_title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "original_title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "overview",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "overview",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "popularity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "popularity",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "poster_path",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "poster_path",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "production_companies",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "production_companies",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "production_countries",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "production_countries",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "release_date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "release_date",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "revenue",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "runtime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "runtime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "spoken_languages",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "spoken_languages",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "tagline",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "tagline",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "video",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "video",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "vote_average",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "vote_average",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "vote_count",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "vote_count",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipelineId",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "source_filename",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Movies_MetaData_File",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Movies_MetaData_Sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Ratings Files",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "ratings_part*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.ratings;",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "userId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "userId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "movieId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "movieId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "rating",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "rating",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipelineId",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "source_filename",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Ratings_File",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Ratings_Sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-25T17:41:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Credits_File')]",
				"[concat(variables('factoryId'), '/datasets/DS_Credits_Sink')]",
				"[concat(variables('factoryId'), '/datasets/DS_Movies_MetaData_File')]",
				"[concat(variables('factoryId'), '/datasets/DS_Movies_MetaData_Sink')]",
				"[concat(variables('factoryId'), '/datasets/DS_Ratings_File')]",
				"[concat(variables('factoryId'), '/datasets/DS_Ratings_Sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/web')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EmailSending",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.URIofHTTPPOST_secret",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n    \"message\" :     @{pipeline().RunId}.\"\n   }",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-01T19:22:14Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Archivation_Dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movies/archieve",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ConfigurationTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SourceContainer",
						"type": "varchar"
					},
					{
						"name": "SourceFolder",
						"type": "varchar"
					},
					{
						"name": "SourceFile",
						"type": "varchar"
					},
					{
						"name": "ColumnDelimiter",
						"type": "varchar"
					},
					{
						"name": "Encoding",
						"type": "varchar"
					},
					{
						"name": "EscapeCharacter",
						"type": "varchar"
					},
					{
						"name": "QuoteCharacter",
						"type": "varchar"
					},
					{
						"name": "SchemaName",
						"type": "varchar"
					},
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "DIU",
						"type": "varchar"
					},
					{
						"name": "Mapping",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "etl",
					"table": "tControlMetadata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ABLB_files')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().SourceFileName",
							"type": "Expression"
						},
						"container": "movies"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_Files')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SinkFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().SinkFileName",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Credits_File')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movies",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "cast",
						"type": "String"
					},
					{
						"name": "crew",
						"type": "String"
					},
					{
						"name": "id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Credits_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cast",
						"type": "nvarchar"
					},
					{
						"name": "crew",
						"type": "nvarchar"
					},
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "credits"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Movies_MetaData_File')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movies",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "cast",
						"type": "String"
					},
					{
						"name": "crew",
						"type": "String"
					},
					{
						"name": "id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Movies_MetaData_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cast",
						"type": "nvarchar"
					},
					{
						"name": "crew",
						"type": "nvarchar"
					},
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "movies_metadata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Ratings_File')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movies",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "cast",
						"type": "String"
					},
					{
						"name": "crew",
						"type": "String"
					},
					{
						"name": "id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Ratings_Part_File')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ratings_part*.csv",
						"container": "movies"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "cast",
						"type": "String"
					},
					{
						"name": "crew",
						"type": "String"
					},
					{
						"name": "id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Ratings_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cast",
						"type": "nvarchar"
					},
					{
						"name": "crew",
						"type": "nvarchar"
					},
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "ratings"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatasetForDimMovieTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServicetoDataMartSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieIdNK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "ReleaseDate",
						"type": "date"
					},
					{
						"name": "Runtime",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatus",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimMovie"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServicetoDataMartSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatasetForDimOnlineServiceTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServicetoDataMartSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceCode",
						"type": "nvarchar"
					},
					{
						"name": "ServiceName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimOnlineService"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServicetoDataMartSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatasetForFactOnlinePurchaseTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServicetoDataMartSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OnlineServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactOnlinePurchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServicetoDataMartSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatasetForFactOnlinePurchase_MonthlySnapshotTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServicetoDataMartSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MonthKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OnlineServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PurchaseAmount",
						"type": "decimal",
						"precision": 10,
						"scale": 1
					},
					{
						"name": "PurchaseQuantity",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactOnlinePurchase_MonthlySnapshot"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServicetoDataMartSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatasetFortMovieStatusTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatusName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tMovieStatus"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatasetFortMoviesTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieIdNK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Budget",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HomepagePath",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "OriginalTitle",
						"type": "nvarchar"
					},
					{
						"name": "ReleaseDate",
						"type": "date"
					},
					{
						"name": "Revenue",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Runtime",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AvgVote",
						"type": "decimal",
						"precision": 3,
						"scale": 1
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SrcFileName",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tMovies"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatasetFortOnlinePurchaseTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UserId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					},
					{
						"name": "TransactionDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SrcFileName",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tOnlinePurchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatasetFortOnlineServiceTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ServiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceCode",
						"type": "nvarchar"
					},
					{
						"name": "ServiceName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tOnlineService"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_daa')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceToOnlineBlobStorageContainerRawFolderDataLake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "online",
						"container": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceToOnlineBlobStorageContainerRawFolderDataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicDatasetAzureSQL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceParametrized",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": "azure-mentoring-aa.database.windows.net",
						"DatabaseName": "movies"
					}
				},
				"parameters": {
					"DS_SchemaName": {
						"type": "string"
					},
					"DS_TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().DS_SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().DS_TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceParametrized')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicDatasetDataLake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceDataLakeParametrized",
					"type": "LinkedServiceReference",
					"parameters": {
						"StorageURL": "https://azurementoringdatalakeaa.dfs.core.windows.net"
					}
				},
				"parameters": {
					"DS_SourceContainer": {
						"type": "string"
					},
					"DS_SourceFolder": {
						"type": "string"
					},
					"DS_SourceFile": {
						"type": "string"
					},
					"DS_ColumnDelimiter": {
						"type": "string"
					},
					"DS_Encoding": {
						"type": "string"
					},
					"DS_EscapeCharacter": {
						"type": "string"
					},
					"DS_QuoteCharacter": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().DS_SourceFile",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().DS_SourceFolder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().DS_SourceContainer",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().DS_ColumnDelimiter",
						"type": "Expression"
					},
					"encodingName": {
						"value": "@dataset().DS_Encoding",
						"type": "Expression"
					},
					"escapeChar": {
						"value": "@dataset().DS_EscapeCharacter",
						"type": "Expression"
					},
					"firstRowAsHeader": true,
					"quoteChar": {
						"value": "@dataset().DS_QuoteCharacter",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceDataLakeParametrized')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_smn_ControlDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_smn_20230326"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"table": "MainControlTable_smn"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_smn_DestinationDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceParametrized",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": {
							"value": "@dataset().cw_ls_ServerName",
							"type": "Expression"
						},
						"DatabaseName": {
							"value": "@dataset().cw_ls_DatabaseName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					},
					"cw_ls_ServerName": {
						"type": "String"
					},
					"cw_ls_DatabaseName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_smn_20230326"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceParametrized')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_smn_SourceDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_columnDelimiter": {
						"type": "String"
					},
					"cw_escapeChar": {
						"type": "String"
					},
					"cw_quoteChar": {
						"type": "String"
					},
					"cw_firstRowAsHeader": {
						"type": "Bool"
					},
					"cw_fileName": {
						"type": "String"
					},
					"cw_folderPath": {
						"type": "String"
					},
					"cw_fileSystem": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_smn_20230326"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().cw_folderPath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().cw_fileSystem",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().cw_columnDelimiter",
						"type": "Expression"
					},
					"escapeChar": {
						"value": "@dataset().cw_escapeChar",
						"type": "Expression"
					},
					"firstRowAsHeader": {
						"value": "@dataset().cw_firstRowAsHeader",
						"type": "Expression"
					},
					"quoteChar": {
						"value": "@dataset().cw_quoteChar",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RatingsCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForBlobStorageAustralia",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "ratings"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "userId",
						"type": "String"
					},
					{
						"name": "movieId",
						"type": "String"
					},
					{
						"name": "rating",
						"type": "String"
					},
					{
						"name": "timestamp",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForBlobStorageAustralia')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RatingsCSVSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "ratingsoutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkArchievingProcessedFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online/archieve",
						"fileSystem": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "movies",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkDatasetForAzureSQLDatabase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "online_service_name",
						"type": "nvarchar"
					},
					{
						"name": "online_service_code",
						"type": "nvarchar"
					},
					{
						"name": "movie_id",
						"type": "nvarchar"
					},
					{
						"name": "user_id",
						"type": "nvarchar"
					},
					{
						"name": "price",
						"type": "nvarchar"
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					},
					{
						"name": "transaction_date",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "online_purchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkDatasetForOnlineBlobStorageContainerRawFolderDataLake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online",
						"fileSystem": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkDataset_New')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movies",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkOfCSVFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movies/archieve",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkStageCinemaTicketsTableInMoviesDatabase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cinema_code",
						"type": "nvarchar"
					},
					{
						"name": "cinema_name",
						"type": "nvarchar"
					},
					{
						"name": "movie_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ticket_count",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ticket_price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					},
					{
						"name": "transaction_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "cinema_tickets"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"container": "movies"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDatasetForOnlineBlobStorageContainer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceToOnlineBlobStorageContainer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "online"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"serviceName": {
							"type": "string"
						},
						"serviceCode": {
							"type": "string"
						},
						"movieId": {
							"type": "integer"
						},
						"userId": {
							"type": "integer"
						},
						"price": {
							"type": "string"
						},
						"transaction": {
							"type": "object",
							"properties": {
								"id": {
									"type": "string"
								},
								"datetime": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceToOnlineBlobStorageContainer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_New')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "movies"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_daa')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceToOnlineBlobStorageContainer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "online"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceToOnlineBlobStorageContainer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceOfCSVFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movies",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceSQLServerCinemaTickets')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceToSQLServerForCinemaTickets",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "CinemaCode",
						"type": "nvarchar"
					},
					{
						"name": "CinemaName",
						"type": "nvarchar"
					},
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TicketCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TicketPrice",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					},
					{
						"name": "TransactionDt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Tickets"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceToSQLServerForCinemaTickets')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WatermarkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceForSQLDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "nvarchar"
					},
					{
						"name": "WatermarkValue",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "watermarktable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedServiceDataLakeParametrized')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"StorageURL": {
						"type": "string",
						"defaultValue": "https://azurementoringdatalakeaa.dfs.core.windows.net"
					}
				},
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LinkedServiceDataLakeParametrized_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LinkedServiceForAzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "DataLakeAccessKey"
					}
				},
				"connectVia": {
					"referenceName": "Azure-IR-M8",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-M8')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForAzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedServiceForAzureKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LinkedServiceForAzureKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedServiceForBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LinkedServiceForAzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LinkedServiceForBlobStorage_properties_typeProperties_sasUri_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForAzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedServiceForBlobStorageAustralia')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LinkedServiceForBlobStorageAustralia_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedServiceForDataLakeStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LinkedServiceForDataLakeStorage_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedServiceForSQLDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LinkedServiceForSQLDatabase_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LinkedServiceForAzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "mentoring-adf-aa"
					}
				},
				"connectVia": {
					"referenceName": "Azure-IR-M8",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-M8')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForAzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedServiceParametrized')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "azure-mentoring-aa.database.windows.net"
					},
					"DatabaseName": {
						"type": "string",
						"defaultValue": "movies"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LinkedServiceParametrized_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LinkedServiceForAzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "mentoring-adf-aa"
					}
				},
				"connectVia": {
					"referenceName": "Azure-IR-M8",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-M8')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForAzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedServiceToOnlineBlobStorageContainer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LinkedServiceForAzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LinkedServiceToOnlineBlobStorageContainer_properties_typeProperties_sasUri_secretName')]",
						"secretVersion": "de0fc4d2dbac4afeb4e6937e2ee83c2e"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForAzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedServiceToOnlineBlobStorageContainerRawFolderDataLake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LinkedServiceToOnlineBlobStorageContainerRawFolderDataLake_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedServiceToSQLServerForCinemaTickets')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LinkedServiceForAzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LinkedServiceToSQLServerForCinemaTickets_properties_typeProperties_connectionString_secretName')]"
					},
					"userName": "[parameters('LinkedServiceToSQLServerForCinemaTickets_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LinkedServiceForAzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "MyLocalPassword"
					}
				},
				"connectVia": {
					"referenceName": "IntegrationRuntimeFor6thModule",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IntegrationRuntimeFor6thModule')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForAzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedServicetoDataMartSQLDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LinkedServiceForAzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LinkedServicetoDataMartSQLDatabase_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceForAzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADF')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure-IR-M8')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "France Central",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 5,
							"cleanup": false
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureEastAustraliaIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Australia East",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IntegrationRuntimeFor6thModule')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Clone_Fact Tables population')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetFortOnlinePurchaseTable",
								"type": "DatasetReference"
							},
							"name": "tOnlinePurchaseTable"
						},
						{
							"dataset": {
								"referenceName": "DatasetForDimOnlineServiceTable",
								"type": "DatasetReference"
							},
							"name": "DimOnlineServiceTable"
						},
						{
							"dataset": {
								"referenceName": "DatasetForDimMovieTable",
								"type": "DatasetReference"
							},
							"name": "DimMovieTable"
						},
						{
							"dataset": {
								"referenceName": "DatasetFortOnlineServiceTable",
								"type": "DatasetReference"
							},
							"name": "tOnlineServiceTable"
						},
						{
							"dataset": {
								"referenceName": "DatasetFortMoviesTable",
								"type": "DatasetReference"
							},
							"name": "tMoviesTable"
						},
						{
							"dataset": {
								"referenceName": "DatasetFortOnlinePurchaseTable",
								"type": "DatasetReference"
							},
							"name": "tOnlinePurchaseTable2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetForFactOnlinePurchaseTable",
								"type": "DatasetReference"
							},
							"name": "DestinationFactOnlinePurchaseTable"
						},
						{
							"dataset": {
								"referenceName": "DatasetForFactOnlinePurchase_MonthlySnapshotTable",
								"type": "DatasetReference"
							},
							"name": "DestinationFactOnlinePurchaseMonthlySnapshotTable"
						}
					],
					"transformations": [
						{
							"name": "TransformColumns"
						},
						{
							"name": "JoinPurchaseWithService"
						},
						{
							"name": "JoinServiceWithDimService"
						},
						{
							"name": "JoinPurchaseWithtMovies"
						},
						{
							"name": "JointMoviesWithDimMovie"
						},
						{
							"name": "tOnlineServiceTableSelection"
						},
						{
							"name": "tOnlinePurchaseTableSelection"
						},
						{
							"name": "DimOnlineServiceTableSelection"
						},
						{
							"name": "tMoviesTableSelection"
						},
						{
							"name": "DimMovieTableSelection"
						},
						{
							"name": "tOnlinePurchaseTable2Selection"
						},
						{
							"name": "JoinPurchaseWithService2"
						},
						{
							"name": "JoinServiceWithDimService2"
						},
						{
							"name": "TransformColumns2"
						},
						{
							"name": "Aggregation"
						},
						{
							"name": "RenamingColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlinePurchaseTable",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimOnlineServiceTable",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimMovieTable",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlineServiceTable",
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMoviesTable",
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlinePurchaseTable2",
						"JointMoviesWithDimMovie derive(TransactionDate = toInteger(replace(toString(toDate(TransactionDate)),'-',''))) ~> TransformColumns",
						"tOnlinePurchaseTableSelection, tOnlineServiceTableSelection join(tOnlinePurchaseTableSelection@ServiceId == tOnlineServiceTableSelection@ServiceId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPurchaseWithService",
						"JoinPurchaseWithService, DimOnlineServiceTableSelection join(tOnlineServiceTableSelection@ServiceCode == DimOnlineServiceTableSelection@ServiceCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinServiceWithDimService",
						"JoinServiceWithDimService, tMoviesTableSelection join(tOnlinePurchaseTableSelection@MovieId == tMoviesTableSelection@MovieId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPurchaseWithtMovies",
						"JoinPurchaseWithtMovies, DimMovieTableSelection join(tMoviesTableSelection@MovieIdNK == DimMovieTableSelection@MovieIdNK,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JointMoviesWithDimMovie",
						"tOnlineServiceTable select(mapColumn(",
						"          ServiceId,",
						"          ServiceCode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> tOnlineServiceTableSelection",
						"tOnlinePurchaseTable select(mapColumn(",
						"          ServiceId,",
						"          MovieId,",
						"          Price,",
						"          TransactionId,",
						"          TransactionDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> tOnlinePurchaseTableSelection",
						"DimOnlineServiceTable select(mapColumn(",
						"          ServiceKey,",
						"          ServiceCode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DimOnlineServiceTableSelection",
						"tMoviesTable select(mapColumn(",
						"          MovieId,",
						"          MovieIdNK",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> tMoviesTableSelection",
						"DimMovieTable select(mapColumn(",
						"          MovieKey,",
						"          MovieIdNK",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DimMovieTableSelection",
						"tOnlinePurchaseTable2 select(mapColumn(",
						"          ServiceId,",
						"          Price,",
						"          TransactionId,",
						"          TransactionDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> tOnlinePurchaseTable2Selection",
						"tOnlinePurchaseTable2Selection, tOnlineServiceTableSelection join(tOnlinePurchaseTable2Selection@ServiceId == tOnlineServiceTableSelection@ServiceId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPurchaseWithService2",
						"JoinPurchaseWithService2, DimOnlineServiceTableSelection join(tOnlineServiceTableSelection@ServiceCode == DimOnlineServiceTableSelection@ServiceCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinServiceWithDimService2",
						"JoinServiceWithDimService2 derive(TransactionDate = toInteger(toString(year(TransactionDate)) + toString(month(TransactionDate)))) ~> TransformColumns2",
						"TransformColumns2 aggregate(groupBy(TransactionDate,",
						"          ServiceKey),",
						"     Price = sum(Price),",
						"          TransactionId = toInteger(count(TransactionId))) ~> Aggregation",
						"Aggregation select(mapColumn(",
						"          MonthKey = TransactionDate,",
						"          OnlineServiceKey = ServiceKey,",
						"          PurchaseAmount = Price,",
						"          PurchaseQuantity = TransactionId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenamingColumns",
						"TransformColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateKey = TransactionDate,",
						"          OnlineServiceKey = ServiceKey,",
						"          MovieKey,",
						"          Price,",
						"          TransactionId",
						"     )) ~> DestinationFactOnlinePurchaseTable",
						"RenamingColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MonthKey as integer,",
						"          OnlineServiceKey as integer,",
						"          PurchaseAmount as decimal(10,1),",
						"          PurchaseQuantity as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MonthKey,",
						"          OnlineServiceKey,",
						"          PurchaseAmount,",
						"          PurchaseQuantity",
						"     )) ~> DestinationFactOnlinePurchaseMonthlySnapshotTable"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetFortOnlinePurchaseTable')]",
				"[concat(variables('factoryId'), '/datasets/DatasetForDimOnlineServiceTable')]",
				"[concat(variables('factoryId'), '/datasets/DatasetForDimMovieTable')]",
				"[concat(variables('factoryId'), '/datasets/DatasetFortOnlineServiceTable')]",
				"[concat(variables('factoryId'), '/datasets/DatasetFortMoviesTable')]",
				"[concat(variables('factoryId'), '/datasets/DatasetForFactOnlinePurchaseTable')]",
				"[concat(variables('factoryId'), '/datasets/DatasetForFactOnlinePurchase_MonthlySnapshotTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Fact Tables population')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetFortOnlinePurchaseTable",
								"type": "DatasetReference"
							},
							"name": "tOnlinePurchaseTable"
						},
						{
							"dataset": {
								"referenceName": "DatasetForDimOnlineServiceTable",
								"type": "DatasetReference"
							},
							"name": "DimOnlineServiceTable"
						},
						{
							"dataset": {
								"referenceName": "DatasetForDimMovieTable",
								"type": "DatasetReference"
							},
							"name": "DimMovieTable"
						},
						{
							"dataset": {
								"referenceName": "DatasetFortOnlineServiceTable",
								"type": "DatasetReference"
							},
							"name": "tOnlineServiceTable"
						},
						{
							"dataset": {
								"referenceName": "DatasetFortMoviesTable",
								"type": "DatasetReference"
							},
							"name": "tMoviesTable"
						},
						{
							"dataset": {
								"referenceName": "DatasetFortOnlinePurchaseTable",
								"type": "DatasetReference"
							},
							"name": "tOnlinePurchaseTable2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetForFactOnlinePurchaseTable",
								"type": "DatasetReference"
							},
							"name": "DestinationFactOnlinePurchaseTable"
						},
						{
							"dataset": {
								"referenceName": "DatasetForFactOnlinePurchase_MonthlySnapshotTable",
								"type": "DatasetReference"
							},
							"name": "DestinationFactOnlinePurchaseMonthlySnapshotTable"
						}
					],
					"transformations": [
						{
							"name": "TransformColumns"
						},
						{
							"name": "JoinPurchaseWithService"
						},
						{
							"name": "JoinServiceWithDimService"
						},
						{
							"name": "JoinPurchaseWithtMovies"
						},
						{
							"name": "JointMoviesWithDimMovie"
						},
						{
							"name": "JoinPurchaseWithService2"
						},
						{
							"name": "JoinServiceWithDimService2"
						},
						{
							"name": "TransformColumns2"
						},
						{
							"name": "Aggregation"
						},
						{
							"name": "RenamingColumns"
						},
						{
							"name": "SelectionRequiredColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlinePurchaseTable",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimOnlineServiceTable",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimMovieTable",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlineServiceTable",
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMoviesTable",
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlinePurchaseTable2",
						"SelectionRequiredColumns derive(TransactionDate = toInteger(replace(toString(toDate(TransactionDate)),'-',''))) ~> TransformColumns",
						"tOnlinePurchaseTable, tOnlineServiceTable join(tOnlinePurchaseTable@ServiceId == tOnlineServiceTable@ServiceId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPurchaseWithService",
						"JoinPurchaseWithService, DimOnlineServiceTable join(tOnlineServiceTable@ServiceCode == DimOnlineServiceTable@ServiceCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinServiceWithDimService",
						"JoinServiceWithDimService, tMoviesTable join(tOnlinePurchaseTable@MovieId == tMoviesTable@MovieId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPurchaseWithtMovies",
						"JoinPurchaseWithtMovies, DimMovieTable join(tMoviesTable@MovieIdNK == DimMovieTable@MovieIdNK,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JointMoviesWithDimMovie",
						"tOnlinePurchaseTable2, tOnlineServiceTable join(tOnlinePurchaseTable2@ServiceId == tOnlineServiceTable@ServiceId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPurchaseWithService2",
						"JoinPurchaseWithService2, DimOnlineServiceTable join(tOnlineServiceTable@ServiceCode == DimOnlineServiceTable@ServiceCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinServiceWithDimService2",
						"JoinServiceWithDimService2 derive(TransactionDate = toInteger(toString(year(TransactionDate)) + toString(month(TransactionDate)))) ~> TransformColumns2",
						"TransformColumns2 aggregate(groupBy(TransactionDate,",
						"          ServiceKey),",
						"     Price = sum(Price),",
						"          TransactionId = toInteger(count(TransactionId))) ~> Aggregation",
						"Aggregation select(mapColumn(",
						"          MonthKey = TransactionDate,",
						"          OnlineServiceKey = ServiceKey,",
						"          PurchaseAmount = Price,",
						"          PurchaseQuantity = TransactionId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenamingColumns",
						"JointMoviesWithDimMovie select(mapColumn(",
						"          tOnlinePurchaseTable_ServiceId = tOnlinePurchaseTable@ServiceId,",
						"          tOnlinePurchaseTable_MovieId = tOnlinePurchaseTable@MovieId,",
						"          Price,",
						"          TransactionId,",
						"          TransactionDate,",
						"          tOnlineServiceTable_ServiceId = tOnlineServiceTable@ServiceId,",
						"          tOnlineServiceTable_ServiceCode = tOnlineServiceTable@ServiceCode,",
						"          ServiceKey,",
						"          DimOnlineServiceTable_ServiceCode = DimOnlineServiceTable@ServiceCode,",
						"          DimOnlineServiceTable_MovieId = tMoviesTable@MovieId,",
						"          DimOnlineServiceTable_MovieIdNK = tMoviesTable@MovieIdNK,",
						"          MovieKey,",
						"          DimMovieTable_MovieIdNK = DimMovieTable@MovieIdNK",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectionRequiredColumns",
						"TransformColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateKey = TransactionDate,",
						"          OnlineServiceKey = ServiceKey,",
						"          MovieKey,",
						"          Price,",
						"          TransactionId",
						"     )) ~> DestinationFactOnlinePurchaseTable",
						"RenamingColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MonthKey as integer,",
						"          OnlineServiceKey as integer,",
						"          PurchaseAmount as decimal(10,1),",
						"          PurchaseQuantity as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MonthKey,",
						"          OnlineServiceKey,",
						"          PurchaseAmount,",
						"          PurchaseQuantity",
						"     )) ~> DestinationFactOnlinePurchaseMonthlySnapshotTable"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetFortOnlinePurchaseTable')]",
				"[concat(variables('factoryId'), '/datasets/DatasetForDimOnlineServiceTable')]",
				"[concat(variables('factoryId'), '/datasets/DatasetForDimMovieTable')]",
				"[concat(variables('factoryId'), '/datasets/DatasetFortOnlineServiceTable')]",
				"[concat(variables('factoryId'), '/datasets/DatasetFortMoviesTable')]",
				"[concat(variables('factoryId'), '/datasets/DatasetForFactOnlinePurchaseTable')]",
				"[concat(variables('factoryId'), '/datasets/DatasetForFactOnlinePurchase_MonthlySnapshotTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Population')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetFortMoviesTable",
								"type": "DatasetReference"
							},
							"name": "tMoviesTable"
						},
						{
							"dataset": {
								"referenceName": "DatasetFortMovieStatusTable",
								"type": "DatasetReference"
							},
							"name": "tMoviesStatusTable"
						},
						{
							"dataset": {
								"referenceName": "DatasetFortOnlineServiceTable",
								"type": "DatasetReference"
							},
							"name": "tOnlineServiceTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetForDimMovieTable",
								"type": "DatasetReference"
							},
							"name": "DestinationDimMovieTable"
						},
						{
							"dataset": {
								"referenceName": "DatasetForDimOnlineServiceTable",
								"type": "DatasetReference"
							},
							"name": "DestinationDimOnlineServiceTable"
						}
					],
					"transformations": [
						{
							"name": "JoinTwoTables"
						},
						{
							"name": "SelectionRequiredColumns"
						},
						{
							"name": "AuditColumns"
						},
						{
							"name": "SelectionRequiredColumns2"
						},
						{
							"name": "AuditColumns2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMoviesTable",
						"source(output(",
						"          MovieStatusId as integer,",
						"          MovieStatusName as string,",
						"          CreatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMoviesStatusTable",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlineServiceTable",
						"tMoviesTable, tMoviesStatusTable join(tMoviesTable@MovieStatusId == tMoviesStatusTable@MovieStatusId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTwoTables",
						"JoinTwoTables select(mapColumn(",
						"          MovieId,",
						"          tMoviesMovieIdNK = MovieIdNK,",
						"          Budget,",
						"          HomepagePath,",
						"          tMoviesTitle = Title,",
						"          OriginalTitle,",
						"          tMoviesReleaseDate = ReleaseDate,",
						"          Revenue,",
						"          tMoviesRuntime = Runtime,",
						"          MovieStatusId = tMoviesTable@MovieStatusId,",
						"          AvgVote,",
						"          tMoviesCreatedDate = tMoviesTable@CreatedDate,",
						"          tMoviesModifiedDate = ModifiedDate,",
						"          SrcFileName,",
						"          tMoviesStatusMovieStatusId = tMoviesStatusTable@MovieStatusId,",
						"          tMoviesStatusMovieStatusName = MovieStatusName,",
						"          tMoviesStatusCreatedDate = tMoviesStatusTable@CreatedDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectionRequiredColumns",
						"SelectionRequiredColumns derive(tMoviesCreatedDate = currentUTC(),",
						"          tMoviesStatusCreatedDate = currentUTC(),",
						"          tMoviesModifiedDate = currentUTC()) ~> AuditColumns",
						"tOnlineServiceTable select(mapColumn(",
						"          ServiceId,",
						"          tOnlineServiceServiceCode = ServiceCode,",
						"          tOnlineServiceServiceName = ServiceName,",
						"          tOnlineServiceCreatedDate = CreatedDate,",
						"          tOnlineServiceModifiedDate = ModifiedDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectionRequiredColumns2",
						"SelectionRequiredColumns2 derive(tOnlineServiceCreatedDate = currentUTC(),",
						"          tOnlineServiceModifiedDate = currentUTC()) ~> AuditColumns2",
						"AuditColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MovieIdNK = tMoviesMovieIdNK,",
						"          Title = tMoviesTitle,",
						"          ReleaseDate = tMoviesReleaseDate,",
						"          Runtime = tMoviesRuntime,",
						"          MovieStatus = tMoviesStatusMovieStatusName,",
						"          CreatedDate = tMoviesCreatedDate,",
						"          ModifiedDate = tMoviesModifiedDate",
						"     )) ~> DestinationDimMovieTable",
						"AuditColumns2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ServiceCode = tOnlineServiceServiceCode,",
						"          ServiceName = tOnlineServiceServiceName,",
						"          CreatedDate = tOnlineServiceCreatedDate,",
						"          ModifiedDate = tOnlineServiceModifiedDate",
						"     )) ~> DestinationDimOnlineServiceTable"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetFortMoviesTable')]",
				"[concat(variables('factoryId'), '/datasets/DatasetFortMovieStatusTable')]",
				"[concat(variables('factoryId'), '/datasets/DatasetFortOnlineServiceTable')]",
				"[concat(variables('factoryId'), '/datasets/DatasetForDimMovieTable')]",
				"[concat(variables('factoryId'), '/datasets/DatasetForDimOnlineServiceTable')]"
			]
		}
	]
}