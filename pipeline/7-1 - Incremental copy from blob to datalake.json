{
	"name": "7-1 - Incremental copy from blob to datalake",
	"properties": {
		"activities": [
			{
				"name": "LookupOldWaterMarkActivity",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "TriggerTime",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT\nTableName,\nWatermarkValue\nFROM\nwatermarktable\nWHERE\nTableName = 'JSON files';",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "WatermarkDataset",
						"type": "DatasetReference"
					},
					"firstRowOnly": true
				}
			},
			{
				"name": "WriteWatermarkActivity",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Copy data incrementally",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[usp_write_watermark]",
					"storedProcedureParameters": {
						"LastModifiedtime": {
							"value": {
								"value": "@variables('TriggerTime')",
								"type": "Expression"
							},
							"type": "Datetime"
						},
						"TableName": {
							"value": {
								"value": "@{activity('LookupOldWaterMarkActivity').output.firstRow.TableName}",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LinkedServiceForSQLDatabase",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Copy data incrementally",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "LookupOldWaterMarkActivity",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "AzureBlobStorageReadSettings",
							"maxConcurrentConnections": 0,
							"recursive": false,
							"modifiedDatetimeStart": {
								"value": "@{activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue}",
								"type": "Expression"
							},
							"modifiedDatetimeEnd": {
								"value": "@variables('TriggerTime')",
								"type": "Expression"
							},
							"wildcardFileName": "*",
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"sink": {
						"type": "JsonSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "JsonWriteSettings"
						}
					},
					"enableStaging": false
				},
				"inputs": [
					{
						"referenceName": "SourceDatasetForOnlineBlobStorageContainer",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "SinkDatasetForOnlineBlobStorageContainerRawFolderDataLake",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "TriggerTime",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "TriggerTime",
					"value": {
						"value": "@pipeline().TriggerTime",
						"type": "Expression"
					}
				}
			}
		],
		"variables": {
			"TriggerTime": {
				"type": "String"
			}
		},
		"annotations": [],
		"lastPublishTime": "2023-03-16T16:10:30Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}