{
	"name": "Modified_9-1 - Implement Copy Activity with Parametrization_copy1",
	"properties": {
		"activities": [
			{
				"name": "LookuptControlMetadataTable",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ConfigurationTable",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "LoopControlMetaDataTable",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "LookuptControlMetadataTable",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('LookuptControlMetadataTable').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "CopyData",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [
								{
									"name": "Source",
									"value": "@{item().SourceContainer}/@{item().SourceFolder}/@{item().SourceFile}"
								},
								{
									"name": "Destination",
									"value": "@{item().SchemaName}.@{item().TableName}"
								}
							],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"additionalColumns": [
										{
											"name": "pipelineId",
											"value": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											}
										},
										{
											"name": "source_filename",
											"value": "$$FILEPATH"
										}
									],
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": false,
										"wildcardFolderPath": {
											"value": "@item().SourceFolder",
											"type": "Expression"
										},
										"wildcardFileName": {
											"value": "@item().SourceFile",
											"type": "Expression"
										},
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"sink": {
									"type": "AzureSqlSink",
									"preCopyScript": {
										"value": "TRUNCATE TABLE @{item().SchemaName}.@{item().TableName}",
										"type": "Expression"
									},
									"writeBehavior": "insert",
									"sqlWriterUseTableLock": false,
									"disableMetricsCollection": false
								},
								"enableStaging": false,
								"logSettings": {
									"enableCopyActivityLog": true,
									"copyActivityLogSettings": {
										"logLevel": "Info",
										"enableReliableLogging": false
									},
									"logLocationSettings": {
										"linkedServiceName": {
											"referenceName": "LinkedServiceForDataLakeStorage",
											"type": "LinkedServiceReference"
										},
										"path": "logdata"
									}
								},
								"dataIntegrationUnits": {
									"value": "@item().DIU",
									"type": "Expression"
								},
								"translator": {
									"value": "@json(item().mapping)",
									"type": "Expression"
								}
							},
							"inputs": [
								{
									"referenceName": "DynamicDatasetDataLake",
									"type": "DatasetReference",
									"parameters": {
										"DS_SourceContainer": {
											"value": "@item().SourceContainer",
											"type": "Expression"
										},
										"DS_SourceFolder": {
											"value": "@item().SourceFolder",
											"type": "Expression"
										},
										"DS_SourceFile": {
											"value": "@item().SourceFile",
											"type": "Expression"
										},
										"DS_ColumnDelimiter": {
											"value": "@item().ColumnDelimiter",
											"type": "Expression"
										},
										"DS_Encoding": {
											"value": "@item().Encoding",
											"type": "Expression"
										},
										"DS_EscapeCharacter": {
											"value": "@item().EscapeCharacter",
											"type": "Expression"
										},
										"DS_QuoteCharacter": {
											"value": "@item().QuoteCharacter",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "DynamicDatasetAzureSQL",
									"type": "DatasetReference",
									"parameters": {
										"DS_SchemaName": {
											"value": "@item().SchemaName",
											"type": "Expression"
										},
										"DS_TableName": {
											"value": "@item().TableName",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "StatisticsLog",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "CopyData",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[etl].[InsertStatisticsLog]",
								"storedProcedureParameters": {
									"CopiedRowsCount": {
										"value": {
											"value": "@activity('CopyData').output.rowsCopied",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"DIU": {
										"value": {
											"value": "@activity('CopyData').output.usedDataIntegrationUnits",
											"type": "Expression"
										},
										"type": "String"
									},
									"Errors": {
										"value": {
											"value": "@activity('CopyData').output.errors",
											"type": "Expression"
										},
										"type": "String"
									},
									"IntegrationRuntimeTitle": {
										"value": {
											"value": "@activity('CopyData').output.effectiveIntegrationRuntime",
											"type": "Expression"
										},
										"type": "String"
									},
									"ParallelCopies": {
										"value": {
											"value": "@activity('CopyData').output.usedParallelCopies",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"PipelineName": {
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										},
										"type": "String"
									},
									"ProcessedFileName": {
										"value": {
											"value": "@item().SourceFile",
											"type": "Expression"
										},
										"type": "String"
									},
									"ProcessedFilesCount": {
										"value": {
											"value": "@activity('CopyData').output.filesRead",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"ReadDataBytes": {
										"value": {
											"value": "@activity('CopyData').output.dataRead",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"ReadRowsCount": {
										"value": {
											"value": "@activity('CopyData').output.rowsRead",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"RunId": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "String"
									},
									"SinkType": {
										"value": {
											"value": "@activity('CopyData').output.executionDetails[0].sink.type",
											"type": "Expression"
										},
										"type": "String"
									},
									"SourceType": {
										"value": {
											"value": "@activity('CopyData').output.executionDetails[0].source.type",
											"type": "Expression"
										},
										"type": "String"
									},
									"Throughput": {
										"value": {
											"value": "@activity('CopyData').output.throughput",
											"type": "Expression"
										},
										"type": "String"
									},
									"WriteDataBytes": {
										"value": {
											"value": "@activity('CopyData').output.dataWritten",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LinkedServiceForSQLDatabase",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "PipelineLog",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "CopyData",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[etl].[InsertPipelineLog]",
								"storedProcedureParameters": {
									"CopyDurationSeconds": {
										"value": {
											"value": "@activity('CopyData').output.executionDetails[0].duration",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"EndTime": {
										"value": {
											"value": "@addSeconds(activity('CopyData').output.executionDetails[0].start, activity('CopyData').output.executionDetails[0].duration)",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"PipelineName": {
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										},
										"type": "String"
									},
									"PreCopyScriptDurationSeconds": {
										"value": {
											"value": "@activity('CopyData').output.executionDetails[0].detailedDurations.preCopyScriptDuration",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"QueueDurationSeconds": {
										"value": {
											"value": "@activity('CopyData').output.executionDetails[0].detailedDurations.queuingDuration",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"RunId": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "String"
									},
									"StartTime": {
										"value": {
											"value": "@activity('CopyData').output.executionDetails[0].start",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"Status": {
										"value": {
											"value": "@activity('CopyData').output.executionDetails[0].status",
											"type": "Expression"
										},
										"type": "String"
									},
									"TransferDurationSeconds": {
										"value": {
											"value": "@activity('CopyData').output.executionDetails[0].detailedDurations.transferDuration",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LinkedServiceForSQLDatabase",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "BillingLog",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "CopyData",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[etl].[InsertBillingLog]",
								"storedProcedureParameters": {
									"Duration": {
										"value": {
											"value": "@activity('CopyData').output.billingReference.billableDuration[0].duration",
											"type": "Expression"
										},
										"type": "Decimal"
									},
									"MeterType": {
										"value": {
											"value": "@activity('CopyData').output.billingReference.billableDuration[0].meterType",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineName": {
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										},
										"type": "String"
									},
									"RunId": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "String"
									},
									"Unit": {
										"value": {
											"value": "@activity('CopyData').output.billingReference.billableDuration[0].unit",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LinkedServiceForSQLDatabase",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "ErrorHandling",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "CopyData",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[etl].[InsertPipelineErrorLog]",
								"storedProcedureParameters": {
									"ActivityName": {
										"value": {
											"value": "'CopyData'",
											"type": "Expression"
										},
										"type": "String"
									},
									"ErrorCode": {
										"value": {
											"value": "@concat(activity('CopyData').output.errors[0].Code, ': ', split(split(activity('CopyData').output.errors[0].Message, '=')[1], ',')[0])",
											"type": "Expression"
										},
										"type": "String"
									},
									"ErrorDatetime": {
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"ErrorMessage": {
										"value": {
											"value": "@activity('CopyData').output.errors[0].Message",
											"type": "Expression"
										},
										"type": "String"
									},
									"FailureType": {
										"value": {
											"value": "@split(split(activity('CopyData').output.errors[0].Message, ',')[1],'=')[1]",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineName": {
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										},
										"type": "String"
									},
									"RunId": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LinkedServiceForSQLDatabase",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Status",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "ErrorHandling",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "Status",
								"value": {
									"value": "@activity('CopyData').output.executionDetails[0].status",
									"type": "Expression"
								}
							}
						},
						{
							"name": "PipelineError",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Status",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "PipelineError",
								"value": {
									"value": "@{activity('CopyData').output.errors[0].Message}",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "POST Send Email",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "GET Azure Key Vault Secret",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@activity('GET Azure Key Vault Secret').output.value",
						"type": "Expression"
					},
					"connectVia": {
						"referenceName": "Azure-IR-M8",
						"type": "IntegrationRuntimeReference"
					},
					"method": "POST",
					"headers": {
						"Content-Type": "application/json"
					},
					"body": {
						"value": "{\n  \"message\" : \"This is our dynamic message from our pipeline with @{pipeline().RunId} run ID. This is a part of the task from the 11th module.\",\n  \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n  \"pipelineName\": \"@{pipeline().Pipeline}\",\n  \"runId\": \"@{pipeline().RunId}\",\n  \"copyDataActivityName\": \"CopyData\",\n  \"receiver\": \"@{pipeline().parameters.receiver}\",\n  \"pipelineStatus\": \"@{variables('Status')}\",\n  \"ErrorMessage\": \"@{variables('PipelineError')}\"\n}\n",
						"type": "Expression"
					}
				}
			},
			{
				"name": "GET Azure Key Vault Secret",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "LoopControlMetaDataTable",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@pipeline().globalParameters.URIofHTTPPOST_secret",
						"type": "Expression"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			}
		],
		"parameters": {
			"receiver": {
				"type": "string",
				"defaultValue": "Anatolii_Balakiriev1@epam.com"
			}
		},
		"variables": {
			"Status": {
				"type": "String",
				"defaultValue": "Succeeded"
			},
			"PipelineError": {
				"type": "String",
				"defaultValue": "No errors"
			}
		},
		"annotations": [],
		"lastPublishTime": "2023-04-02T20:19:16Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}